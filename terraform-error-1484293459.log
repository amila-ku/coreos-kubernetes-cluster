2 error(s) occurred:

* apply operation: Unknown 'ValidateResource' shadow value for "template_file": &errors.errorString{s:"shadow closed"}
* apply operation: Diff "template_file.master-user-data" had unequal states (real, then shadow):

&terraform.ResourceConfig{ComputedKeys:[]string(nil), Raw:map[string]interface {}{"vars":[]map[string]interface {}{map[string]interface {}{"DNS_SERVICE_IP":"${var.dns_service_ip}", "KUBERNETES_CONTAINERS_CIDR":"${var.pod_network}", "FLANNELD_ETCD_ENDPOINTS":"http://${aws_elb.etcd-elb.dns_name}:2379", "K8S_VER":"${var.kubelet_version}", "API_SECURE_PORT":"${var.api_secure_port}", "SERVICE_IP_RANGE":"${var.service_ip_range}", "KUBERNETES_VERSION":"${var.kubernetes_version}", "S3_BUCKET":"${var.s3_bucket}", "ETCD_ENDPOINTS":"http://${aws_elb.etcd-elb.dns_name}:2379"}}, "template":"${file(\"data/master-userdata.yml\")}"}, Config:map[string]interface {}{"template":"#cloud-config\nwrite-files:\n  - path: \"/etc/flannel/options.env\"\n    owner: \"root\"\n    content: |\n      FLANNELD_IFACE=$private_ipv4\n      FLANNELD_ETCD_ENDPOINTS=${FLANNELD_ETCD_ENDPOINTS}\n\n  - path: \"/etc/kubernetes/cni/docker_opts_cni.env\"\n    owner: \"root\"\n    content: |\n      DOCKER_OPT_BIP=\"\"\n      DOCKER_OPT_IPMASQ=\"\"\n\n  - path: \"/etc/kubernetes/cni/net.d/10-flannel.conf\"\n    owner: \"root\"\n    content: |\n      {\n        \"name\": \"podnet\",\n        \"type\": \"flannel\",\n        \"delegate\": {\n           \"isDefaultGateway\": true\n        }\n      }\n\n  - path: /tmp/certsetup.sh\n    owner: \"root\"\n    permissions: '0600'\n    content: |\n      #!/bin/bash\n      mkdir -p /etc/kubernetes/ssl/\n      curl -o /etc/kubernetes/ssl/ca.pem  https://k8tlsbackect.s3.amazonaws.com/ca.pem\n      curl -o /etc/kubernetes/ssl/apiserver-key.pem  https://k8tlsbackect.s3.amazonaws.com/kubernetes-key.pem\n      curl -o /etc/kubernetes/ssl/apiserver.pem  https://k8tlsbackect.s3.amazonaws.com/kubernetes.pem\n\n  - path: \"/etc/profile.env\"\n    content: |\n      export KUBELET_VERSION=v1.5.1_coreos.0\n      export FLANNELD_IFACE=$private_ipv4\n      export FLANNELD_ETCD_ENDPOINTS=${FLANNELD_ETCD_ENDPOINTS}\n\n  - path: \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    owner: \"root\"\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: quay.io/coreos/hyperkube:v1.5.1_coreos.0\n          command:\n          - /hyperkube\n          - apiserver\n          - --bind-address=0.0.0.0\n          - --etcd-servers=${ETCD_ENDPOINTS}\n          - --allow-privileged=true\n          - --service-cluster-ip-range=${SERVICE_IP_RANGE}\n          - --secure-port=443\n          - --advertise-address=$private_ipv4\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem\n          - --runtime-config=extensions/v1beta1/networkpolicies=true\n          - --anonymous-auth=false\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n\n  - path: /opt/bin/wupiao\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen\n      [ -n \"$1\" ] && \\\n        until curl -o /dev/null -sf $${1}; do \\\n          sleep 1 && echo .;\n        done;\n      exit $?\n\ncoreos:\n  units:\n  - name: flanneld.service\n    command: start\n    drop-ins:\n      - name: \"40-ExecStartPre-symlink.conf\"\n        content: |\n          [Service]\n          ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env\n\n      - name: \"50-network-config.conf\"\n        content: |\n          [Service]\n          ExecStartPre=/usr/bin/etcdctl --no-sync set /coreos.com/network/config '{ \"Network\": \"${KUBERNETES_CONTAINERS_CIDR}\" }'\n          [Install]\n          WantedBy=multi-user.target\n\n  - name: docker.service\n    command: start\n    drop-ins:\n      - name: \"40-flannel.conf\"\n        content: |\n          [Unit]\n          Requires=flanneld.service\n          After=flanneld.service\n          [Service]\n          EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env\n\n  - name: kubelet.service\n    command: start\n    content: |\n      [Service]\n      Environment=KUBELET_VERSION=${K8S_VER}\n      Environment=ADVERTISE_IP=$private_ipv4\n      Environment=\"RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \\\n        --volume var-log,kind=host,source=/var/log \\\n        --mount volume=var-log,target=/var/log \\\n        --volume dns,kind=host,source=/etc/resolv.conf \\\n        --mount volume=dns,target=/etc/resolv.conf\"\n      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests\n      ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n      ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid\n      ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n        --api-servers=http://127.0.0.1:8080 \\\n        --register-schedulable=false \\\n        --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n        --network-plugin=cni \\\n        --container-runtime=docker \\\n        --allow-privileged=true \\\n        --pod-manifest-path=/etc/kubernetes/manifests \\\n        --hostname-override=$ADVERTISE_IP \\\n        --cluster_dns=${DNS_SERVICE_IP} \\\n        --cluster_domain=cluster.local\n      ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid\n      Restart=always\n      RestartSec=10\n\n      [Install]\n      WantedBy=multi-user.target\n  update:\n    reboot-strategy: \"off\"\n", "vars":[]map[string]interface {}{map[string]interface {}{"DNS_SERVICE_IP":"10.5.0.10", "KUBERNETES_VERSION":"1.2.2", "KUBERNETES_CONTAINERS_CIDR":"10.2.0.0/16", "ETCD_ENDPOINTS":"http://etcd-example-elb-1409471758.eu-central-1.elb.amazonaws.com:2379", "K8S_VER":"v1.5.1_coreos.0", "SERVICE_IP_RANGE":"10.5.0.0/16", "FLANNELD_ETCD_ENDPOINTS":"http://etcd-example-elb-1409471758.eu-central-1.elb.amazonaws.com:2379", "S3_BUCKET":"k8tlsbackect", "API_SECURE_PORT":"443"}}}, raw:(*config.RawConfig)(0xc42041dd40)}

&terraform.ResourceConfig{ComputedKeys:[]string(nil), Raw:map[string]interface {}{"template":"${file(\"data/master-userdata.yml\")}", "vars":[]map[string]interface {}{map[string]interface {}{"KUBERNETES_VERSION":"${var.kubernetes_version}", "KUBERNETES_CONTAINERS_CIDR":"${var.pod_network}", "FLANNELD_ETCD_ENDPOINTS":"http://${aws_elb.etcd-elb.dns_name}:2379", "S3_BUCKET":"${var.s3_bucket}", "K8S_VER":"${var.kubelet_version}", "ETCD_ENDPOINTS":"http://${aws_elb.etcd-elb.dns_name}:2379", "SERVICE_IP_RANGE":"${var.service_ip_range}", "API_SECURE_PORT":"${var.api_secure_port}", "DNS_SERVICE_IP":"${var.dns_service_ip}"}}}, Config:map[string]interface {}{"template":"#cloud-config\nwrite-files:\n  - path: \"/etc/flannel/options.env\"\n    owner: \"root\"\n    content: |\n      FLANNELD_IFACE=$private_ipv4\n      FLANNELD_ETCD_ENDPOINTS=${FLANNELD_ETCD_ENDPOINTS}\n\n  - path: \"/etc/kubernetes/cni/docker_opts_cni.env\"\n    owner: \"root\"\n    content: |\n      DOCKER_OPT_BIP=\"\"\n      DOCKER_OPT_IPMASQ=\"\"\n\n  - path: \"/etc/kubernetes/cni/net.d/10-flannel.conf\"\n    owner: \"root\"\n    content: |\n      {\n        \"name\": \"podnet\",\n        \"type\": \"flannel\",\n        \"delegate\": {\n           \"isDefaultGateway\": true\n        }\n      }\n\n  - path: /tmp/certsetup.sh\n    owner: \"root\"\n    permissions: '0600'\n    content: |\n      #!/bin/bash\n      mkdir -p /etc/kubernetes/ssl/\n      curl -o /etc/kubernetes/ssl/ca.pem  https://k8tlsbackect.s3.amazonaws.com/ca.pem\n      curl -o /etc/kubernetes/ssl/apiserver-key.pem  https://k8tlsbackect.s3.amazonaws.com/kubernetes-key.pem\n      curl -o /etc/kubernetes/ssl/apiserver.pem  https://k8tlsbackect.s3.amazonaws.com/kubernetes.pem\n\n  - path: \"/etc/profile.env\"\n    content: |\n      export KUBELET_VERSION=v1.5.1_coreos.0\n      export FLANNELD_IFACE=$private_ipv4\n      export FLANNELD_ETCD_ENDPOINTS=${FLANNELD_ETCD_ENDPOINTS}\n\n  - path: \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    owner: \"root\"\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: quay.io/coreos/hyperkube:v1.5.1_coreos.0\n          command:\n          - /hyperkube\n          - apiserver\n          - --bind-address=0.0.0.0\n          - --etcd-servers=${ETCD_ENDPOINTS}\n          - --allow-privileged=true\n          - --service-cluster-ip-range=${SERVICE_IP_RANGE}\n          - --secure-port=443\n          - --advertise-address=$private_ipv4\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem\n          - --runtime-config=extensions/v1beta1/networkpolicies=true\n          - --anonymous-auth=false\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n\n  - path: /opt/bin/wupiao\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen\n      [ -n \"$1\" ] && \\\n        until curl -o /dev/null -sf $${1}; do \\\n          sleep 1 && echo .;\n        done;\n      exit $?\n\ncoreos:\n  units:\n  - name: flanneld.service\n    command: start\n    drop-ins:\n      - name: \"40-ExecStartPre-symlink.conf\"\n        content: |\n          [Service]\n          ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env /etc/profile.env\n\n      - name: \"50-network-config.conf\"\n        content: |\n          [Service]\n          ExecStartPre=/usr/bin/etcdctl --no-sync set /coreos.com/network/config '{ \"Network\": \"${KUBERNETES_CONTAINERS_CIDR}\" }'\n          [Install]\n          WantedBy=multi-user.target\n\n  - name: docker.service\n    command: start\n    drop-ins:\n      - name: \"40-flannel.conf\"\n        content: |\n          [Unit]\n          Requires=flanneld.service\n          After=flanneld.service\n          [Service]\n          EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env\n\n  - name: kubelet.service\n    command: start\n    content: |\n      [Service]\n      Environment=KUBELET_VERSION=${K8S_VER}\n      Environment=ADVERTISE_IP=$private_ipv4\n      Environment=\"RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \\\n        --volume var-log,kind=host,source=/var/log \\\n        --mount volume=var-log,target=/var/log \\\n        --volume dns,kind=host,source=/etc/resolv.conf \\\n        --mount volume=dns,target=/etc/resolv.conf\"\n      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests\n      ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n      ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid\n      ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n        --api-servers=http://127.0.0.1:8080 \\\n        --register-schedulable=false \\\n        --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n        --network-plugin=cni \\\n        --container-runtime=docker \\\n        --allow-privileged=true \\\n        --pod-manifest-path=/etc/kubernetes/manifests \\\n        --hostname-override=$ADVERTISE_IP \\\n        --cluster_dns=${DNS_SERVICE_IP} \\\n        --cluster_domain=cluster.local\n      ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid\n      Restart=always\n      RestartSec=10\n\n      [Install]\n      WantedBy=multi-user.target\n  update:\n    reboot-strategy: \"off\"\n", "vars":[]map[string]interface {}{map[string]interface {}{"ETCD_ENDPOINTS":"http://etcd-example-elb-1409471758.eu-central-1.elb.amazonaws.com:2379", "API_SECURE_PORT":"443", "S3_BUCKET":"k8tlsbackect", "K8S_VER":"v1.5.1_coreos.0", "SERVICE_IP_RANGE":"10.5.0.0/16", "DNS_SERVICE_IP":"10.5.0.10", "KUBERNETES_VERSION":"1.2.2", "KUBERNETES_CONTAINERS_CIDR":"10.2.0.0/16", "FLANNELD_ETCD_ENDPOINTS":"http://etcd-example-elb-1409471758.eu-central-1.elb.amazonaws.com:2379"}}}, raw:(*config.RawConfig)(0xc4206a8180)}